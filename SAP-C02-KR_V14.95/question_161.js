const question_161=`QUESTION NO: 161 회사는 웹 호스팅, 데이터베이스 API 서비스 및 비즈니스 로직을 위해 현재 로드 밸런싱된 Amazon EC2 인스턴스 플릿이 있는 소매 주문 웹 애플리케이션을 리팩터링하려고 합니다. 회사는 실패한 주문을 유지하는 동시에 운영 비용을 최소화하는 메커니즘을 갖춘 분리되고 확장 가능한 아키텍처를 만들어야 합니다. 이러한 요구 사항을 충족하는 솔루션은 무엇입니까? A. 데이터베이스 API 서비스를 위해 Amazon API Gateway와 함께 웹 호스팅에 Amazon S3를 사용합니다. 주문 대기열에 Amazon Simple Queue Service(Amazon SQS)를 사용합니다. 실패한 주문을 유지하기 위해 Amazon SQS 긴 폴링과 함께 비즈니스 로직에 Amazon Elastic Container Service(Amazon ECS)를 사용합니다. B. 데이터베이스 API 서비스를 위해 Amazon API Gateway와 함께 웹 호스팅에 AWS Elastic Beanstalk를 사용합니다. 주문 대기열에 Amazon MQ를 사용하십시오. 실패한 주문을 유지하려면 Amazon S3 Glacier Deep Archive와 함께 비즈니스 로직에 AWS Step Functions를 사용하십시오. C. 데이터베이스 API 서비스를 위해 AWS AppSync와 함께 웹 호스팅에 Amazon S3를 사용합니다. 주문 대기열에 Amazon Simple Queue Service(Amazon SQS)를 사용합니다. 실패한 주문을 유지하기 위해 Amazon SQS 데드 레터 대기열과 함께 비즈니스 로직에 AWS Lambda를 사용합니다. D. 데이터베이스 API 서비스를 위해 AWS AppSync와 함께 웹 호스팅에 Amazon Lightsail을 사용합니다. 주문 대기열에 Amazon Simple Email Service(Amazon SES)를 사용합니다. 실패한 주문을 유지하기 위해 Amazon OpenSearch Service와 함께 비즈니스 로직에 Amazon Elastic Kubernetes Service(Amazon EKS)를 사용합니다. Answer: C Explanation: * Use Amazon S3 for web hosting with AWS AppSync for database API services. Use Amazon Simple Queue Service (Amazon SQS) for order queuing. Use AWS Lambda for business logic with an Amazon SQS dead-letter queue for retaining failed orders. This solution will allow you to: * Host a static website on Amazon S3 without provisioning or managing servers1. * Use AWS AppSync to create a scalable GraphQL API that connects to your database and other data sources1. * Use Amazon SQS to decouple and scale your order processing microservices1. * Use AWS Lambda to run code for your business logic without provisioning or managing servers1. * Use an Amazon SQS dead-letter queue to retain messages that can't be processed by your Lambda function1.`;