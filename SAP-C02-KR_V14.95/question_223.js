const question_223=`QUESTION NO: 223 한 회사가 AWS에서 IoT 플랫폼을 운영하고 있습니다. 다양한 위치에 있는 IoT 센서는 Application Load Balancer 뒤에서 실행되는 Amazon EC2 인스턴스에 있는 회사의 Node.js API 서버로 데이터를 보냅니다. 데이터는 4TB 범용 SSD 볼륨을 사용하는 Amazon RDS MySQL DB 인스턴스에 저장됩니다. 회사가 현장에 배치한 센서의 수는 시간이 지남에 따라 증가했으며 크게 증가할 것으로 예상됩니다. API 서버는 지속적으로 과부하되고 RDS 측정항목은 높은 쓰기 대기 시간을 나타냅니다. 다음 중 이 플랫폼을 비용 효율적으로 유지하면서 문제를 영구적으로 해결하고 새로운 센서가 프로비저닝됨에 따라 성장을 가능하게 하는 단계는 무엇입니까? (2개를 선택하세요.) A. 볼륨의 IOPS를 향상시키려면 MySQL 범용 SSD 스토리지의 크기를 6TB로 조정하십시오.
B. RDS MySQL DB 인스턴스 대신 Amazon Aurora를 사용하도록 데이터베이스 계층을 재설계하고 읽기 전용 복제본을 추가합니다. C. Amazon Kinesis Data Streams 및 AWS Lambda를 활용하여 원시 데이터를 수집하고 처리합니다. D. AWS X-Ray를 사용하여 애플리케이션 문제를 분석 및 디버깅하고 로드에 맞게 더 많은 API 서버를 추가합니다. E. RDS MySQL DB 인스턴스 대신 Amazon DynamoDB를 사용하도록 데이터베이스 계층을 재설계합니다. Answer: C,E Explanation: C와 E가 정답입니다. 옵션 C: Amazon Kinesis Data Streams 및 AWS Lambda를 활용하여 원시 데이터를 수집하고 처리하면 API 서버가 지속적으로 과부하되는 문제를 해결하는 데 도움이 됩니다. Kinesis를 사용하면 데이터가 실시간으로 수집 및 처리되므로 API 서버가 증가된 로드를 처리할 수 있습니다. Lambda를 사용하여 데이터를 처리하면 플랫폼의 전반적인 성능과 확장성을 개선하는 데도 도움이 될 수 있습니다. 옵션 E: RDS MySQL DB 인스턴스 대신 Amazon DynamoDB를 사용하도록 데이터베이스 계층을 재설계하면 쓰기 지연 시간이 긴 문제를 해결하는 데 도움이 됩니다. DynamoDB는 고성능과 확장성을 위해 설계된 NoSQL 데이터베이스이므로 이 사용 사례에 매우 적합합니다. 또한 DynamoDB는 Auto Scaling을 지원하므로 데이터베이스가 예상되는 센서 수 증가를 처리할 수 있도록 보장할 수 있습니다.`;