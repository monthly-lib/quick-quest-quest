const question_25=`QUESTION NO: 25 회사가 AWS 클라우드에서 애플리케이션을 실행하고 있습니다. 핵심 비즈니스 로직은 Auto Scaling 그룹의 Amazon EC2 인스턴스 세트에서 실행됩니다. ALB(Application Load Balancer)는 EC2 인스턴스에 트래픽을 분산합니다. Amazon Route 53 레코드 api.example.com이 ALB를 가리키고 있습니다. 회사의 개발 팀은 비즈니스 논리를 크게 업데이트합니다. 회사에는 변경 사항이 배포되면 테스트 기간 동안 고객의 10%만 새로운 논리를 받을 수 있다는 규칙이 있습니다. 고객은 테스트 기간 동안 동일한 버전의 비즈니스 로직을 사용해야 합니다. 회사는 이러한 요구 사항을 충족하기 위해 업데이트를 어떻게 배포해야 합니까? A. 두 번째 ALB를 생성하고 새 Auto Scaling 그룹의 EC2 인스턴스 집합에 새 논리를 배포합니다. EC2 인스턴스에 트래픽을 분산하도록 ALB를 구성합니다. 가중치 기반 라우팅을 사용하도록 Route 53 레코드를 업데이트하고 레코드가 두 ALB를 가리키도록 합니다. B. ALB에서 참조하는 두 번째 대상 그룹을 생성합니다. 이 새 대상 그룹의 EC2 인스턴스에 새 논리를 배포합니다. 가중 대상 그룹을 사용하도록 ALB 리스너 규칙을 업데이트합니다. ALB 대상 그룹 고정성을 구성합니다. C. Auto Scaling 그룹에 대한 새 시작 구성을 생성합니다. AutoScaIingRoIIingUpdate 정책을 사용하도록 시작 구성을 지정하고 MaxBatchSize 옵션을 10으로 설정합니다. Auto Scaling 그룹에서 시작 구성을 교체합니다. 변경 사항을 배포합니다. D. ALB에서 참조하는 두 번째 Auto Scaling 그룹을 생성합니다. 이 새 Auto Scaling 그룹의 EC2 인스턴스 집합에 새 논리를 배포합니다. ALB 라우팅 알고리즘을 최소 미해결 요청(LOR)으로 변경합니다. ALB 세션 고정성을 구성합니다. Answer: B Explanation: The company should create a second target group that is referenced by the ALB. The company should deploy the new logic to EC2 instances in this new target group. The company should update the ALB listener rule to use weighted target groups. The company should configure ALB target group stickiness. This solution will meet the requirements because weighted target groups are a feature that enables you to distribute traffic across multiple target groups using a single listener rule. You can specify a weight for each target group, which determines the percentage of requests that are routed to that target group. For example, if you specify two target groups, each with a weight of 10, each target group receives half the requests1. By creating a second target group and deploying the new logic to EC2 instances in this new target group, the company can have two versions of its business logic running in parallel. By updating the ALB listener rule to use weighted target groups, the company can control how much traffic is sent to each version. By configuring ALB target group stickiness, the company can ensure that a customer uses the same version of the business logic during the testing window. Target group stickiness is a feature that enables you to bind a user's session to a specific target within a target group for the duration of the session2. The other options are not correct because: Creating a second ALB and deploying the new logic to a set of EC2 instances in a new Auto Scaling group would not be as cost-effective or simple as using weighted target groups. A second ALB would incur additional charges and require more configuration and management. Updating the Route 53 record to use weighted routing would not ensure that a customer uses the same version of the business logic during the testing window, as DNS caching could affect how requests are routed. Creating a new launch configuration for the Auto Scaling group and replacing it on the Auto Scaling group would not allow for gradual traffic shifting between versions. A launch configuration is a template that an Auto Scaling group uses to launch EC2 instances. You can specify information such as the AMI ID, instance type, key pair, security groups, and block device mapping for your instances3. However, replacing the launch configuration on an Auto Scaling group would affect all instances in that group, not just 10% of customers. Creating a second Auto Scaling group and changing the ALB routing algorithm to least outstanding requests (LOR) would not allow for controlled traffic shifting between versions. A second Auto Scaling group would require more configuration and management. The LOR routing algorithm is a feature that enables you to route traffic based on how quickly targets respond to requests. The load balancer selects a target from the target group with the fewest outstanding requests4. However, this algorithm does not take into account customer sessions or weights. Reference: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancerlisteners. html#listener-rules-weighted-target-groups https://docs.aws.amazon.com/elasticloadbalancing/latest/application/sticky-sessions.html https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#routing-algorithm`;