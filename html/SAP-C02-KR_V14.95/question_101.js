const question_101=`QUESTION NO: 101 회사는 전자 상거래 웹 사이트를 위한 DR(재해 복구) 솔루션을 구축해야 합니다. 웹 애플리케이션은 t3.Iarge Amazon EC2 인스턴스 플릿에서 호스팅되며 Amazon RDS for MySQL DB 인스턴스를 사용합니다. EC2 인스턴스는 여러 가용 영역에 걸쳐 확장되는 Auto Scaling 그룹에 있습니다. 재해 발생 시 웹 애플리케이션은 RPO가 30초이고 R TO가 10분인 보조 환경으로 장애 조치해야 합니다. 이러한 요구 사항을 가장 비용 효율적으로 충족하는 솔루션은 무엇입니까? A. 코드형 인프라(IaC)를 사용하여 DR 지역에서 새 인프라를 프로비저닝합니다. DB 인스턴스에 대한 리전 간 읽기 전용 복제본을 생성합니다. AWS Backup에서 백업 계획을 설정하여 EC2 인스턴스 및 DB 인스턴스에 대한 교차 리전 백업을 생성합니다. EC2 인스턴스와 DB 인스턴스를 30초마다 DR 지역에 백업하는 cron 표현식을 생성합니다. 최신 EC2 백업에서 EC2 인스턴스를 복구합니다. Amazon Route 53 지리적 위치 라우팅 정책을 사용하여 재해 발생 시 자동으로 DR 리전으로 장애 조치합니다. B. 코드형 인프라(laC)를 사용하여 DR 지역에서 새 인프라를 프로비저닝합니다. DB 인스턴스에 대한 리전 간 읽기 전용 복제본을 생성합니다. EC2 인스턴스를 DR 지역에 지속적으로 복제하도록 AWS Elastic Disaster Recovery를 설정합니다. DR 지역에서 최소 용량으로 EC2 인스턴스 실행 Amazon Route 53 장애 조치 라우팅 정책을 사용하여 재해 발생 시 자동으로 DR 지역으로 장애 조치합니다. Auto Scaling 그룹의 원하는 용량을 늘립니다. C. AWS Backup에서 백업 계획을 설정하여 EC2 인스턴스 및 DB 인스턴스에 대한 교차 리전 백업을 생성합니다. EC2 인스턴스와 DB 인스턴스를 30초마다 DR 지역에 백업하는 cron 표현식을 생성합니다. 코드형 인프라(IaC)를 사용하여 DR 리전에서 새 인프라를 프로비저닝합니다. 새 인스턴스에서 백업된 데이터를 수동으로 복원합니다. 재해 발생 시 Amazon Route 53 단순 라우팅 정책을 사용하여 DR 리전으로 자동 장애 조치합니다. D. 코드형 인프라(IaC)를 사용하여 DR 지역에서 새 인프라를 프로비저닝합니다. Amazon Aurora 글로벌 데이터베이스를 생성합니다. EC2 인스턴스를 DR 지역에 지속적으로 복제하도록 AWS Elastic Disaster Recovery를 설정합니다. DR 지역에서 전체 용량으로 EC2 인스턴스의 Auto Scaling 그룹을 실행합니다. Amazon Route 53 장애 조치 라우팅 정책을 사용하여 재해 발생 시 자동으로 DR 리전으로 장애 조치합니다. Answer: B Explanation: The company should use infrastructure as code (IaC) to provision the new infrastructure in the DR Region. The company should create a cross-Region read replica for the DB instance. The company should set up AWS Elastic Disaster Recovery to continuously replicate the EC2 instances to the DR Region. The company should run the EC2 instances at the minimum capacity in the DR Region. The company should use an Amazon Route 53 failover routing policy to automatically fail over to the DR Region in the event of a disaster. The company should increase the desired capacity of the Auto Scaling group. This solution will meet the requirements most cost-effectively because AWS Elastic Disaster Recovery (AWS DRS) is a service that minimizes downtime and data loss with fast, reliable recovery of onpremises and cloud-based applications using affordable storage, minimal compute, and point-in-time recovery. AWS DRS enables RPOs of seconds and RTOs of minutes1. AWS DRS continuously replicates data from the source servers to a staging area subnet in the DR Region, where it uses low-cost storage and minimal compute resources to maintain ongoing replication. In the event of a disaster, AWS DRS automatically converts the servers to boot and run natively on AWS and launches recovery instances on AWS within minutes2. By using AWS DRS, the company can save costs by removing idle recovery site resources and paying for the full disaster recovery site only when needed. By creating a cross-Region read replica for the DB instance, the company can have a standby copy of its primary database in a different AWS Region3. By using infrastructure as code (IaC), the company can provision the new infrastructure in the DR Region in an automated and consistent way4. By using an Amazon Route 53 failover routing policy, the company can route traffic to a resource that is healthy or to another resource when the first resource becomes unavailable. The other options are not correct because: Using AWS Backup to create cross-Region backups for the EC2 instances and the DB instance would not meet the RPO and RTO requirements. AWS Backup is a service that enables you to centralize and automate data protection across AWS services. You can use AWS Backup to back up your application data across AWS services in your account and across accounts. However, AWS Backup does not provide continuous replication or fast recovery; it creates backups at scheduled intervals and requires manual restoration. Creating backups every 30 seconds would also incur high costs and network bandwidth. Creating an Amazon API Gateway Data API service integration with Amazon Redshift would not help with disaster recovery. The Data API is a feature that enables you to query your Amazon Redshift cluster using HTTP requests, without needing a persistent connection or a SQL client. It is useful for building applications that interact with Amazon Redshift, but not for replicating or recovering data. Creating an AWS Data Exchange datashare by connecting AWS Data Exchange to the Redshift cluster would not help with disaster recovery. AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use AWS Data Exchange to subscribe to a diverse selection of third-party data products or offer your own data products to other AWS customers. A datashare is a feature that enables you to share live and secure access to your Amazon Redshift data across your accounts or with third parties without copying or moving the underlying dat a. It is useful for sharing query results and views with other users, but not for replicating or recovering data. Reference: https://aws.amazon.com/disaster-recovery/ https://docs.aws.amazon.com/drs/latest/userguide/what-is-drs.html https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html#USER_ ReadRepl.XRgn https://aws.amazon.com/cloudformation/ https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html https://aws.amazon.com/backup/ https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html https://aws.amazon.com/data-exchange/ https://docs.aws.amazon.com/redshift/latest/dg/datashare-overview.html`;