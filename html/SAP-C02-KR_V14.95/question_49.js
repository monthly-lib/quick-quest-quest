const question_49=`QUESTION NO: 49 회사는 온프레미스 데이터 센터에서 AWS로 3계층 웹 애플리케이션을 마이그레이션할 계획입니다. 회사는 서버 측 JavaScript 라이브러리를 사용하여 Ui를 개발했습니다. 비즈니스 로직 및 API 계층은 Python 기반 웹 프레임워크를 사용합니다. 데이터 계층은 MySQL 데이터베이스 회사는 비즈니스 요구 사항을 충족하기 위해 애플리케이션을 사용자 정의했습니다. 회사는 애플리케이션을 재설계하기를 원하지 않습니다. 회사는 최소한의 개발로 애플리케이션을 AWS로 플랫폼을 변경하는 솔루션이 필요합니다. 솔루션은 가용성이 높고 운영 오버헤드를 줄여야 합니다. 이러한 요구 사항을 충족하는 솔루션은 무엇입니까? A. Amazon S3의 정적 웹사이트에 UI 배포 Amazon CloudFront를 사용하여 웹사이트 제공 Docker 이미지에 비즈니스 로직 구축 Amazon Elastic Container Registry(Amazon ECR)에 이미지 저장 Amazon Elastic Container Service(Amazon ECS) 사용 Application Load Balancer가 앞에 있는 웹사이트를 호스팅하기 위해 Fargate 시작 유형으로 Amazon Aurora MySQL DB 클러스터에 데이터 계층 배포 B. Docker 이미지에 UI 및 비즈니스 로직 구축 Amazon Elastic Container Registry(Amazon ECR)에 이미지 저장 Fargate 시작 유형과 함께 Amazon Elastic Container Service(Amazon ECS)를 사용하여 애플리케이션으로 UI 및 비즈니스 로직 애플리케이션 호스팅 로드 밸런서 앞 데이터베이스를 Amazon RDS for MySQL 다중 AZ DB 인스턴스로 마이그레이션 C. Amazon S3의 정적 웹 사이트에 UI 배포 Amazon CloudFront를 사용하여 웹 사이트 제공 비즈니스 로직을 AWS Lambda 함수로 변환 함수를 Amazon API Gateway와 통합 Amazon Aurora MySQL DB 클러스터에 데이터 계층 배포 D. Docker 이미지에 UI 및 비즈니스 로직 구축 Amazon Elastic Container Registry(Amazon ECR)에 이미지 저장 Fargate 프로필과 함께 Amazon Elastic Kubernetes Service(Amazon EKS)를 사용하여 UI 및 비즈니스 로직 호스팅 AWS Database Migration Service 사용( AWS DMS) 데이터 계층을 Amazon DynamoDB로 마이그레이션 Answer: A Explanation: This solution utilizes Amazon S3 and CloudFront to deploy the UI as a static website, which can be done with minimal development effort. The business logic and API tier can be containerized in a Docker image and stored in Amazon Elastic Container Registry (ECR) and run on Amazon Elastic Container Service (ECS) with the Fargate launch type, which allows the application to be highly available with minimal operational overhead. The data layer can be deployed on an Amazon Aurora MySQL DB cluster which is a fully managed relational database service. Amazon Aurora provides high availability and performance for the data layer without the need for managing the underlying infrastructure.`;