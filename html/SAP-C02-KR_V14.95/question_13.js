const question_13=`QUESTION NO: 13 AWS Organizations를 사용하는 회사는 개발자가 AWS를 실험할 수 있도록 합니다. 회사에서 배포한 랜딩 존의 일부로 개발자는 회사 이메일 주소를 사용하여 계정을 요청합니다. 회사는 개발자가 비용이 많이 드는 서비스를 시작하거나 불필요하게 서비스를 실행하지 않도록 하기를 원합니다. 회사는 개발자에게 AWS 비용을 제한하기 위해 고정된 월 예산을 제공해야 합니다. 이러한 요구 사항을 충족하는 단계 조합은 무엇입니까? (3개를 선택하세요.) A. 고정된 월 계정 사용 한도를 설정하기 위해 SCP를 생성합니다. 개발자 계정에 SCP를 적용합니다. B. AWS 예산을 사용하여 계정 생성 프로세스의 일부로 각 개발자 계정에 대해 고정된 월 예산을 생성합니다. C. 값비싼 서비스 및 구성 요소에 대한 액세스를 거부하는 SCP를 만듭니다. 개발자 계정에 SCP를 적용합니다. D. 비용이 많이 드는 서비스 및 구성 요소에 대한 액세스를 거부하는 IAM 정책을 만듭니다. 개발자 계정에 IAM 정책을 적용합니다. E. 예산 금액에 도달하면 서비스를 종료하는 AWS 예산 알림 작업을 생성합니다. 모든 서비스를 종료하도록 조치를 구성하십시오. F. 예산 금액에 도달하면 Amazon Simple Notification Service(Amazon SNS) 알림을 보내는 AWS 예산 알림 작업을 생성합니다. 모든 서비스를 종료하려면 AWS Lambda 함수를 호출하십시오. Answer: B,C,F Explanation: Option A is incorrect because creating an SCP to set a fixed monthly account usage limit is not possible. SCPs are policies that specify the services and actions that users and roles can use in the member accounts of an AWS Organization. SCPs cannot enforce budget limits or prevent users from launching costly services or running services unnecessarily1 Option B is correct because using AWS Budgets to create a fixed monthly budget for each developer's account as part of the account creation process meets the requirement of giving developers a fixed monthly budget to limit their AWS costs. AWS Budgets allows you to plan your service usage, service costs, and instance reservations. You can create budgets that alert you when your costs or usage exceed (or are forecasted to exceed) your budgeted amount2 Option C is correct because creating an SCP to deny access to costly services and components meets the requirement of ensuring that developers are not launching costly services or running services unnecessarily. SCPs can restrict access to certain AWS services or actions based on conditions such as region, resource tags, or request time. For example, an SCP can deny access to Amazon Redshift clusters or Amazon EC2 instances with certain instance types1 Option D is incorrect because creating an IAM policy to deny access to costly services and components is not sufficient to meet the requirement of ensuring that developers are not launching costly services or running services unnecessarily. IAM policies can only control access to resources within a single AWS account. If developers have multiple accounts or can create new accounts, they can bypass the IAM policy restrictions. SCPs can apply across multiple accounts within an AWS Organization and prevent users from creating new accounts that do not comply with the SCP rules3 Option E is incorrect because creating an AWS Budgets alert action to terminate services when the budgeted amount is reached is not possible. AWS Budgets alert actions can only perform one of the following actions: apply an IAM policy, apply an SCP, or send a notification through Amazon SNS. AWS Budgets alert actions cannot terminate services directly. Option F is correct because creating an AWS Budgets alert action to send an Amazon SNS notification when the budgeted amount is reached and invoking an AWS Lambda function to terminate all services meets the requirement of giving developers a fixed monthly budget to limit their AWS costs. AWS Budgets alert actions can send notifications through Amazon SNS when a budget threshold is breached. Amazon SNS can trigger an AWS Lambda function that can perform custom logic such as terminating all services in the developer's account. This way, developers cannot exceed their budget limit and incur additional costs.`;